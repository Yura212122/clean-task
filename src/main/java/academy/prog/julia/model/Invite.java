package academy.prog.julia.model;

import academy.prog.julia.utils.Utils;
import jakarta.persistence.*;

import java.time.LocalDateTime;

/**
 * Represents an invitation in the system.
 * This class maps to the 'invite_codes' table in the database.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate
 */
@Entity
@Table(name = "invite_codes")
public class Invite {

    /**
     * Identifier for group destination type
     * Identifier for coworker destination type
     */
    public static final String DESTINATION_GROUP = "group";
    public static final String DESTINATION_COWORKER = "coworker";

    /**
     * Unique identifier for the invitation.
     *
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue
    private Long id;

    /**
     * Code for the invitation.
     *
     * This field must be unique and cannot be null.
     */
    @Column(nullable = false, unique = true)
    private String code;

    /**
     * The expiration date and time of the invitation.
     *
     * This field is mapped to a column in the database with a timestamp and cannot be null.
     */
    @Temporal(value = TemporalType.TIMESTAMP)
    @Column(name = "expiration_date", nullable = false)
    private LocalDateTime expirationDate;

    /**
     * The number of times the invitation has been used.
     *
     * This field cannot be null.
     */
    @Column(name = "usage_count", nullable = false)
    private int usageCount;

    /**
     * The role associated with the invitation.
     *
     * This field cannot be null.
     */
    @Column(nullable = false)
    private UserRole role;

    /**
     * The type of destination for the invitation (e.g., group or coworker).
     */
    private String destinationType;

    /**
     * The actual destination for the invitation.
     */
    private String destination;

    /**
     * Default constructor required by JPA.
     *
     * Initializes a new instance of the Invite class.
     */
    public Invite() {}

    /**
     * Static method to create a new invite with specified parameters.
     *
     * @param userRole The role associated with the invitation
     * @param expireAfterDaysCount Number of days after which the invitation expires
     * @param maxUsageCount Maximum number of times the invitation can be used
     * @return A new instance of Invite with initialized properties
     */
    public static Invite createNewOf(
            UserRole userRole,
            int expireAfterDaysCount,
            int maxUsageCount
    ) {
        var invite = new Invite();

        invite.setRole(userRole);

        /**
         * The expiration date, which = current local time and date + due date(expireAfterDaysCount)
         */
        invite.setExpirationDate(LocalDateTime.now().plusDays(expireAfterDaysCount));
        invite.setUsageCount(maxUsageCount);

        /**
         * A code of 20 randomly generated characters
         */
        invite.setCode(Utils.randomString(20));

        return invite;
    }

    /**
     * Checks if the invitation is still valid.
     * An invitation is valid if the current date is before the expiration date and it has been used at least once.
     *
     * @return True if the invitation is valid, otherwise false
     */
    public boolean checkValidity() {
        return (LocalDateTime.now().isBefore(expirationDate) && usageCount > 0);
    }

    /**
     * Checks if the invitation has a destination type and destination value set.
     *
     * @return True if both destination type and destination are not null, otherwise false
     */
    public boolean hasDestination() {
        return destinationType != null && destination != null;
    }

    /**
     * Checks if the destination type is 'group'.
     *
     * @return True if the destination type is 'group', otherwise false
     */
    public boolean hasGroupDestination() {
        return hasDestination() && DESTINATION_GROUP.equals(destinationType);
    }

    /**
     * Checks if the destination type is 'coworker'.
     *
     * @return True if the destination type is 'coworker', otherwise false
     */
    public boolean hasCoworkerDestination() {
        return hasDestination() && DESTINATION_COWORKER.equals(destinationType);
    }

    /**
     * Decrements the usage counter by one.
     *
     * This method is called when the invitation is used.
     */
    public void decrementUsageCounter() {
        usageCount--;
    }

    /**
     * Gets the unique identifier of the invitation.
     *
     * @return The unique identifier of the invitation
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the invitation.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the code of the invitation.
     *
     * @return The code of the invitation
     */
    public String getCode() {
        return code;
    }

    /**
     * Sets the code of the invitation.
     *
     * @param code The code to set
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Gets the role associated with the invitation.
     *
     * @return The role associated with the invitation
     */
    public UserRole getRole() {
        return role;
    }

    /**
     * Sets the role associated with the invitation.
     *
     * @param role The role to set
     */
    public void setRole(UserRole role) {
        this.role = role;
    }

    /**
     * Gets the expiration date and time of the invitation.
     *
     * @return The expiration date and time of the invitation
     */
    public LocalDateTime getExpirationDate() {
        return expirationDate;
    }

    /**
     * Sets the expiration date and time of the invitation.
     *
     * @param expirationDate The expiration date and time to set
     */
    public void setExpirationDate(LocalDateTime expirationDate) {
        this.expirationDate = expirationDate;
    }

    /**
     * Gets the usage count of the invitation.
     *
     * @return The usage count of the invitation
     */
    public int getUsageCount() {
        return usageCount;
    }

    /**
     * Sets the usage count of the invitation.
     *
     * @param usageCount The usage count to set
     */
    public void setUsageCount(int usageCount) {
        this.usageCount = usageCount;
    }

    /**
     * Gets the type of destination for the invitation.
     *
     * @return The type of destination for the invitation
     */
    public String getDestinationType() {
        return destinationType;
    }

    /**
     * Sets the type of destination for the invitation.
     *
     * @param destinationType The type of destination to set
     */
    public void setDestinationType(String destinationType) {
        this.destinationType = destinationType;
    }

    /**
     * Gets the actual destination for the invitation.
     *
     * @return The actual destination for the invitation
     */
    public String getDestination() {
        return destination;
    }

    /**
     * Sets the actual destination for the invitation.
     *
     * @param destination The destination to set
     */
    public void setDestination(String destination) {
        this.destination = destination;
    }

    /**
     * Returns a string representation of the invitation.
     *
     * @return A string representing the invitation object
     */
    @Override
    public String toString() {
        return "Invite{" +
                "id=" + id +
                ", code='" + code + '\'' +
                ", expirationDate=" + expirationDate +
                ", usageCount=" + usageCount +
                ", role=" + role +
                ", destinationType='" + destinationType + '\'' +
                ", destination='" + destination + '\'' +
                '}'
        ;
    }

}
