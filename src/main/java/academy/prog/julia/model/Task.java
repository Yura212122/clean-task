package academy.prog.julia.model;

import academy.prog.julia.utils.EntityUtils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Collections;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a task in the system.
 * This class maps to the 'task' table in the database.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate.
 */
@Entity
public class Task implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the task.
     * This field is auto-generated by the database and cannot be null.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;

    /**
     * Name of the task.
     */
    private String name;

    /**
     * URL for the description of the task.
     */
    private String descriptionUrl;

    /**
     * Deadline for the task submission.
     */
    private LocalDate deadline;

    /**
     * Flag indicating if the task is still active (whether the deadline has passed).
     */
    private Boolean isActive;

    /**
     * Expected result of the task.
     */
    private ExpectedResult expectedResult;

    /**
     * Many-to-many relationship with students.
     * A task can be assigned to many students.
     * The relationship is stored in the 'task_students' table.
     */
    @ManyToMany
    @JoinTable(
            name = "task_students",
            joinColumns = @JoinColumn(name = "task_id"),
            inverseJoinColumns = @JoinColumn(name = "student_id"))
    @JsonIgnore
    private Set<User> students;

    /**
     * Collection of task answers associated with the task.
     * Mapped by the 'task' field in the TaskAnswer entity.
     */
    @OneToMany(mappedBy = "task")
    @JsonIgnore
    private Set<TaskAnswer> taskAnswers;

    /**
     * Many-to-one relationship with lessons.
     * A task can belong to one lesson, but a lesson can have many tasks.
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "lesson_id")
    private Lesson lesson;

    /**
     * Adds a student to the task's student collection.
     *
     * @param user The student to add
     * @return True if the student was successfully added
     */
    public boolean addStudent(User user) {
        return students.add(user);
    }

    /**
     * Removes a student from the task's student collection.
     *
     * @param user The student to remove
     * @return True if the student was successfully removed
     */
    public boolean removeStudent(User user) {
        return students.remove(user);
    }

    /**
     * Adds a task answer to the task's collection of answers.
     *
     * @param taskAnswer The task answer to add
     * @return True if the task answer was successfully added
     */
    public boolean addTaskAnswer(TaskAnswer taskAnswer) {
        return taskAnswers.add(taskAnswer);
    }

    /**
     * Removes a task answer from the task's collection of answers.
     *
     * @param taskAnswer The task answer to remove
     * @return True if the task answer was successfully removed
     */
    public boolean removeTaskAnswer(TaskAnswer taskAnswer) {
        return taskAnswers.remove(taskAnswer);
    }

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the Task class.
     */
    public Task() {}

    /**
     * Gets the name of the task.
     *
     * @return The name of the task
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the task.
     *
     * @param name The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the URL for the description of the task.
     *
     * @return The description URL
     */
    public String getDescriptionUrl() {
        return descriptionUrl;
    }

    /**
     * Sets the URL for the description of the task.
     *
     * @param descriptionUrl The description URL to set
     */
    public void setDescriptionUrl(String descriptionUrl) {
        this.descriptionUrl = descriptionUrl;
    }

    /**
     * Gets the deadline for the task submission.
     *
     * @return The deadline date
     */
    public LocalDate getDeadline() {
        return deadline;
    }

    /**
     * Sets the deadline for the task submission.
     *
     * @param deadline The deadline date to set
     */
    public void setDeadline(LocalDate deadline) {
        this.deadline = deadline;
    }

    /**
     * Gets the active status of the task.
     *
     * @return True if the task is active, otherwise false
     */
    public Boolean getActive() {
        return isActive;
    }

    /**
     * Sets the active status of the task.
     *
     * @param active The active status to set
     */
    public void setActive(Boolean active) {
        isActive = active;
    }

    /**
     * Gets the lesson to which this task belongs.
     *
     * @return The lesson associated with the task
     */
    public Lesson getLesson() {
        return lesson;
    }

    /**
     * Sets the lesson to which this task belongs.
     *
     * @param lesson The lesson to associate with the task
     */
    public void setLesson(Lesson lesson) {
        this.lesson = lesson;
    }

    /**
     * Gets the unique identifier of the task.
     *
     * @return The unique identifier of the task
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the task.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the expected result of the task.
     *
     * @return The expected result of the task
     */
    public ExpectedResult getExpectedResult() {
        return expectedResult;
    }

    /**
     * Sets the expected result of the task.
     *
     * @param expectedResult The expected result to set
     */
    public void setExpectedResult(ExpectedResult expectedResult) {
        this.expectedResult = expectedResult;
    }

    /**
     * Gets the students associated with the task.
     *
     * @return The set of students assigned to the task
     */
    public Set<User> getStudents() {
        return students;
    }

    /**
     * Sets the students associated with the task.
     *
     * @param students The set of students to assign to the task
     */
    public void setStudents(Set<User> students) {
        this.students = students;
    }

    /**
     * Gets the task answers associated with the task.
     *
     * @return The set of task answers
     */
    public Set<TaskAnswer> getTaskAnswers() {
        return taskAnswers;
    }

    /**
     * Sets the task answers associated with the task.
     *
     * @param taskAnswers The set of task answers to assign to the task
     */
    public void setTaskAnswers(Set<TaskAnswer> taskAnswers) {
        this.taskAnswers = taskAnswers;
    }

    /**
     * Returns a string representation of the task.
     *
     * @return A string representing the task object
     */
    @Override
    public String toString() {
        return "Task{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", descriptionUrl='" + descriptionUrl + '\'' +
                ", deadline=" + deadline +
                ", isActive=" + isActive +
                ", expectedResult=" + expectedResult +
                ", taskAnswers=" + taskAnswers +
                '}'
        ;
    }

    /**
     * Compares this task to another object for equality.
     * Two tasks are considered equal if their IDs, names, URLs, deadlines, and related entities are equal.
     *
     * @param o The object to compare to
     * @return True if this task is equal to the other object, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Task task = (Task) o;

        return Objects.equals(id, task.id) &&
                Objects.equals(name, task.name) &&
                Objects.equals(descriptionUrl, task.descriptionUrl) &&
                Objects.equals(deadline, task.deadline) &&
                Objects.equals(isActive, task.isActive) &&
                expectedResult == task.expectedResult &&
                EntityUtils.areEntitiesEqualById(lesson, task.lesson, Lesson::getId)
        ;
    }

    /**
     * Computes the hash code for this task.
     * The hash code is based on the task's ID, name, URLs, deadline, expected result, and related entities.
     *
     * @return The hash code of the task
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                descriptionUrl,
                deadline,
                isActive,
                expectedResult,
                lesson != null ? EntityUtils.extractId(lesson, Lesson::getId) : null
        );
    }

}
