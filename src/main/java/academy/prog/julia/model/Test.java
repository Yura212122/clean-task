package academy.prog.julia.model;

import academy.prog.julia.utils.EntityUtils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Collections;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a test in the system.
 * This class maps to the 'test' table in the database.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate.
 */
@Entity
public class Test implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the test.
     * This field is auto-generated by the database and cannot be null.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;

    /**
     * Name of the test.
     */
    private String name;

    /**
     * URL to the test.
     */
    private String testUrl;

    /**
     * Indicates if the test is mandatory.
     */
    private Boolean mandatory;

    /**
     * Flag indicating if the test has been passed.
     */
    private Boolean isPassed;

    /**
     * Deadline for the test.
     */
    private LocalDate deadline;

    /**
     * One-to-many relationship with TestAnswer.
     * A test can have multiple answers associated with it.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @OneToMany(mappedBy = "test", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JsonIgnore
    private Set<TestAnswer> testAnswers = new HashSet<>();

    /**
     * Many-to-one relationship with Lesson.
     * A lesson can have multiple tests.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @JsonIgnore
    @ManyToOne
    @JoinColumn(name = "lesson_id")
    private Lesson lesson;

    /**
     * One-to-many relationship with TestQuestionFromGoogleDocs.
     * A test can have multiple questions from Google Docs.
     * The foreign key for the link to the table of questions is added with the @JoinColumn annotation.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JoinColumn(name = "test_id")
    @JsonIgnore
    private Set<TestQuestionFromGoogleDocs> testQuestionFromGoogleDocs = new HashSet<>();

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the Test class.
     */
    public Test() {}

    /**
     * Adds a TestAnswer to this test.
     *
     * @param answer The TestAnswer to add
     */
    public void addTestAnswerToTest(TestAnswer answer) {
        testAnswers.add(answer);
        answer.setTest(this);
    }

    /**
     * Removes a TestAnswer from this test.
     *
     * @param answer The TestAnswer to remove
     */
    public void removeTestAnswerFromTest(TestAnswer answer) {
        testAnswers.remove(answer);
    }

    /**
     * Gets the name of the test.
     *
     * @return The name of the test
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the test.
     *
     * @param name The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the URL to the test.
     *
     * @return The test URL
     */
    public String getTestUrl() {
        return testUrl;
    }

    /**
     * Sets the URL to the test.
     *
     * @param testUrl The URL to set
     */
    public void setTestUrl(String testUrl) {
        this.testUrl = testUrl;
    }

    /**
     * Gets the flag indicating if the test is mandatory.
     *
     * @return True if the test is mandatory, otherwise false
     */
    public Boolean getMandatory() {
        return mandatory;
    }

    /**
     * Sets the flag indicating if the test is mandatory.
     *
     * @param mandatory The flag to set
     */
    public void setMandatory(Boolean mandatory) {
        this.mandatory = mandatory;
    }

    /**
     * Gets the flag indicating if the test has been passed.
     *
     * @return True if the test has been passed, otherwise false
     */
    public Boolean getPassed() {
        return isPassed;
    }

    /**
     * Sets the flag indicating if the test has been passed.
     *
     * @param passed The flag to set
     */
    public void setPassed(Boolean passed) {
        isPassed = passed;
    }

    /**
     * Gets the deadline for the test.
     *
     * @return The deadline date
     */
    public LocalDate getDeadline() {
        return deadline;
    }

    /**
     * Sets the deadline for the test.
     *
     * @param deadline The deadline date to set
     */
    public void setDeadline(LocalDate deadline) {
        this.deadline = deadline;
    }

    /**
     * Gets the lesson associated with this test.
     *
     * @return The Lesson associated with this test
     */
    public Lesson getLesson() {
        return lesson;
    }

    /**
     * Sets the lesson associated with this test.
     *
     * @param lesson The Lesson to set
     */
    public void setLesson(Lesson lesson) {
        this.lesson = lesson;
    }

    /**
     * Gets the set of TestAnswer associated with this test.
     *
     * @return The set of TestAnswer
     */
    public Set<TestAnswer> getTestAnswers() {
        return testAnswers;
    }

    /**
     * Sets the set of TestAnswer associated with this test.
     *
     * @param testAnswers The set of TestAnswer to set
     */
    public void setTestAnswers(Set<TestAnswer> testAnswers) {
        this.testAnswers = testAnswers;
    }

    /**
     * Gets the unique identifier of the test.
     *
     * @return The unique identifier of the test
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the test.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the set of TestQuestionFromGoogleDocs associated with this test.
     *
     * @return The set of TestQuestionFromGoogleDocs
     */
    public Set<TestQuestionFromGoogleDocs> getTestQuestionFromGoogleDocs() {
        return testQuestionFromGoogleDocs;
    }

    /**
     * Sets the set of TestQuestionFromGoogleDocs associated with this test.
     *
     * @param testQuestionFromGoogleDocs The set of TestQuestionFromGoogleDocs to set
     */
    public void setTestQuestionFromGoogleDocs(Set<TestQuestionFromGoogleDocs> testQuestionFromGoogleDocs) {
        this.testQuestionFromGoogleDocs = testQuestionFromGoogleDocs;
    }

    /**
     * Provides a string representation of the Test.
     * The string includes the ID, name, URL, deadline, and associated entities.
     *
     * @return The string representation of the Test
     */
    @Override
    public String toString() {
        return "Test{" +
                ", deadline=" + deadline +
                ", isPassed=" + isPassed +
                ", mandatory=" + mandatory +
                ", testUrl='" + testUrl + '\'' +
                ", name='" + name + '\'' +
                ", id=" + id +
                ", TestQuestionFromGoogleDocs=" + testQuestionFromGoogleDocs +
                ", lessonId=" + lesson.getId() +
                ", testAnswers=" + (testAnswers != null ? testAnswers : "dont have testAnswers") +
                '}'
        ;
    }

    /**
     * Compares this Test to another object for equality.
     * Two Test objects are considered equal if their IDs, names, URLs, deadlines, and associated entities are equal.
     *
     * @param o The object to compare with
     * @return True if the objects are equal, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Test test = (Test) o;

        return Objects.equals(id, test.id) &&
                Objects.equals(name, test.name) &&
                Objects.equals(testUrl, test.testUrl) &&
                Objects.equals(deadline, test.deadline) &&
                EntityUtils.areEntitiesEqualById(lesson, test.lesson, Lesson::getId)
        ;
    }

    /**
     * Calculates the hash code for this Test.
     * The hash code is based on the ID, name, URL, deadline, and associated entities.
     *
     * @return The hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                testUrl,
                deadline,
                lesson != null ? EntityUtils.extractId(lesson, Lesson::getId) : null
        );
    }
}
