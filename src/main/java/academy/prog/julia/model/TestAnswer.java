package academy.prog.julia.model;

import academy.prog.julia.utils.EntityUtils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

/**
 * Represents an answer to a test in the system.
 * This class maps to the 'test_answer' table in the database.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate.
 */
@Entity
public class TestAnswer implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the test answer.
     * This field is auto-generated by the database and cannot be null.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(nullable = false)
    private Long id;

    /**
     * Course associated with the test answer.
     */
    private String course;

    /**
     * Number of attempts made by the user for this test.
     */
    private Integer attempt;

    /**
     * Indicates if the test has been passed.
     */
    @Column(name = "is_passed")
    private boolean isPassed;

    /**
     * Total score obtained for this test.
     */
    @Column(name = "total_score")
    private String totalScore;

    /**
     * Date when the test was submitted.
     */
    @Column(name = "submitted_date")
    private Date submittedDate;

    /**
     * Many-to-one relationship with User.
     * A test answer is associated with a specific user.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    @JsonIgnore
    private User user;

    /**
     * Many-to-one relationship with Test.
     * A test answer is associated with a specific test.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @ManyToOne
    @JoinColumn(name = "test_id")
    @JsonIgnore
    private Test test;

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the TestAnswer class.
     */
    public TestAnswer() {}

    /**
     * Parameterized constructor to initialize a TestAnswer with specific values.
     *
     * @param course         The course associated with the test answer
     * @param attempt        The number of attempts made
     * @param isPassed       Flag indicating if the test was passed
     * @param totalScore     The total score obtained
     * @param submittedDate  The date when the test was submitted
     * @param user           The user who provided the answer
     * @param test           The test for which the answer was provided
     */
    public TestAnswer(
            String course,
            Integer attempt,
            boolean isPassed,
            String totalScore,
            Date submittedDate,
            User user,
            Test test
    ) {
        this.course = course;
        this.attempt = attempt;
        this.isPassed = isPassed;
        this.totalScore = totalScore;
        this.submittedDate = submittedDate;
        this.user = user;
        this.test = test;
    }

    /**
     * Gets the unique identifier of the test answer.
     *
     * @return The unique identifier
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the test answer.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the course associated with the test answer.
     *
     * @return The course
     */
    public String getCourse() {
        return course;
    }

    /**
     * Sets the course associated with the test answer.
     *
     * @param course The course to set
     */
    public void setCourse(String course) {
        this.course = course;
    }

    /**
     * Gets the number of attempts made by the user for this test.
     *
     * @return The number of attempts
     */
    public Integer getAttempt() {
        return attempt;
    }

    /**
     * Sets the number of attempts made by the user for this test.
     *
     * @param attempt The number of attempts to set
     */
    public void setAttempt(Integer attempt) {
        this.attempt = attempt;
    }

    /**
     * Gets the flag indicating if the test has been passed.
     *
     * @return True if the test was passed, otherwise false
     */
    public boolean getIsPassed() {
        return isPassed;
    }

    /**
     * Sets the flag indicating if the test has been passed.
     *
     * @param passed The flag to set
     */
    public void setIsPassed(boolean passed) {
        isPassed = passed;
    }

    /**
     * Gets the total score obtained for this test.
     *
     * @return The total score
     */
    public String getTotalScore() {
        return totalScore;
    }

    /**
     * Sets the total score obtained for this test.
     *
     * @param totalScore The total score to set
     */
    public void setTotalScore(String totalScore) {
        this.totalScore = totalScore;
    }

    /**
     * Gets the date when the test was submitted.
     *
     * @return The submitted date
     */
    public Date getSubmittedDate() {
        return submittedDate;
    }

    /**
     * Sets the date when the test was submitted.
     *
     * @param submittedDate The submitted date to set
     */
    public void setSubmittedDate(Date submittedDate) {
        this.submittedDate = submittedDate;
    }

    /**
     * Gets the user who provided the answer.
     *
     * @return The User associated with this answer
     */
    public User getUser() {
        return user;
    }

    /**
     * Sets the user who provided the answer.
     *
     * @param user The User to set
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Gets the test for which the answer was provided.
     *
     * @return The Test associated with this answer
     */
    public Test getTest() {
        return test;
    }

    /**
     * Sets the test for which the answer was provided.
     *
     * @param test The Test to set
     */
    public void setTest(Test test) {
        this.test = test;
    }

    /**
     * Provides a string representation of the TestAnswer.
     * The string includes the ID, course, attempt, pass status, total score, and submitted date.
     *
     * @return The string representation of the TestAnswer
     */
    @Override
    public String toString() {
        return "TestAnswer{" +
                "id=" + id +
                ", course='" + course + '\'' +
                ", attempt=" + attempt +
                ", isPassed=" + isPassed +
                ", totalScore=" + totalScore +
                ", submittedDate=" + submittedDate +
                '}'
        ;
    }

    /**
     * Compares this TestAnswer to another object for equality.
     * Two TestAnswer objects are considered equal if their IDs, courses, attempts, total scores,
     * submitted dates, users, and tests are equal.
     *
     * @param o The object to compare with
     * @return True if the objects are equal, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        TestAnswer that = (TestAnswer) o;

        return Objects.equals(id, that.id) &&
                Objects.equals(course, that.course) &&
                Objects.equals(attempt, that.attempt) &&
                Objects.equals(totalScore, that.totalScore) &&
                Objects.equals(submittedDate, that.submittedDate) &&
                EntityUtils.areEntitiesEqualById(user, that.user, User::getId) &&
                EntityUtils.areEntitiesEqualById(test, that.test, Test::getId)
        ;
    }

    /**
     * Calculates the hash code for this TestAnswer.
     * The hash code is based on the ID, course, attempt, total score, submitted date, user, and test.
     *
     * @return The hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                course,
                attempt,
                totalScore,
                submittedDate,
                user != null ? EntityUtils.extractId(user, User::getId) : null,
                test != null ? EntityUtils.extractId(test, Test::getId) : null
        );
    }

}
