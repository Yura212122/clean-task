package academy.prog.julia.model;


import jakarta.persistence.*;
import org.hibernate.annotations.Cascade;

import java.io.Serial;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Represents a test question retrieved from Google Docs.
 * This class maps to a database table to store test questions, answer options, and correct answers.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate.
 */
@Entity
public class TestQuestionFromGoogleDocs implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for each test question, auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The actual question text.
     */
    //added
    @Column(name = "question", length = 255)

    private String question;

    /**
     * A list of possible answer options for the test question.
     *
     * - @ElementCollection indicates that this field is a collection of non-entity objects,
     *   in this case, a list of Strings, which will be stored in a separate table.
     *
     * - @CollectionTable specifies the name of the table that will store the list of options.
     *   The table is named 'test_answer_options', and each row in this table corresponds to
     *   an option for a specific test question.
     *
     * - @JoinColumn(name = "test_question_id") defines the foreign key column that links the
     *   'test_answer_options' table to the 'TestQuestionFromGoogleDocs' entity. The foreign key
     *   is 'test_question_id', ensuring that each option is associated with the correct question.
     *
     * - @Cascade(org.hibernate.annotations.CascadeType.ALL) ensures that any changes (such as
     *   saving, updating, or deleting) to the parent entity ('TestQuestionFromGoogleDocs')
     *   will also be applied to this collection of options.
     *
     * - The options are initialized as an empty ArrayList to ensure there is always a collection
     *   to work with, even if no options are provided initially.
     */
    @ElementCollection
    @CollectionTable(name = "test_answer_options", joinColumns = @JoinColumn(name = "test_question_id"))
    @Column(name = "options")
    @Cascade(org.hibernate.annotations.CascadeType.ALL)
    private List<String> options = new ArrayList<>();

    /**
     * A list of correct answers for the test question.
     *
     * - @ElementCollection is used to store a collection of basic types (in this case, Strings)
     *   in a separate table, rather than in the main entity's table.
     *
     * - @CollectionTable(name = "test_answer_correct_answers") defines the name of the table
     *   that stores the correct answers. The table is named 'test_answer_correct_answers', and
     *   it holds all the correct answers for each test question.
     *
     * - @JoinColumn(name = "test_question_id") establishes the foreign key relationship between
     *   the 'test_answer_correct_answers' table and the 'TestQuestionFromGoogleDocs' entity.
     *   The foreign key is 'test_question_id', ensuring that each correct answer is linked to
     *   the appropriate question.
     *
     * - The correctAnswers field is initialized as an empty ArrayList to prevent null pointer
     *   exceptions and to provide an empty collection by default.
     */
    @ElementCollection
    @CollectionTable(name = "test_answer_correct_answers", joinColumns = @JoinColumn(name = "test_question_id"))
    @Column(name = "correct_answer")
    @Cascade(org.hibernate.annotations.CascadeType.ALL)
    private List<String> correctAnswers = new ArrayList<>();

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the TestAnswer class.
     */
    public TestQuestionFromGoogleDocs() {}

    /**
     * Constructor to initialize a TestQuestionFromGoogleDocs with a question, options, and correct answers.
     *
     * @param question       The question text
     * @param options        List of possible answer options
     * @param correctAnswers List of correct answers
     */
    public TestQuestionFromGoogleDocs(
            String question,
            List<String> options,
            List<String> correctAnswers
    ) {
        this.question = question;
        this.options = options;
        this.correctAnswers = correctAnswers;
    }

    /**
     * Gets the unique identifier of this test question.
     *
     * @return The unique identifier
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier for this test question.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the question text.
     *
     * @return The question text
     */
    public String getQuestion() {
        return question;
    }

    /**
     * Sets the question text.
     *
     * @param question The question text to set
     */
    public void setQuestion(String question) {
        this.question = question;
    }

    /**
     * Gets the list of possible answer options.
     *
     * @return List of answer options
     */
    public List<String> getOptions() {
        return options;
    }

    /**
     * Sets the list of possible answer options.
     *
     * @param options The list of answer options to set
     */
    public void setOptions(List<String> options) {
        this.options = options;
    }

    /**
     * Gets the list of correct answers.
     *
     * @return List of correct answers
     */
    public List<String> getCorrectAnswers() {
        return correctAnswers;
    }

    /**
     * Sets the list of correct answers.
     *
     * @param correctAnswers The list of correct answers to set
     */
    public void setCorrectAnswers(List<String> correctAnswers) {
        this.correctAnswers = correctAnswers;
    }

    /**
     * Provides a string representation of the TestQuestionFromGoogleDocs.
     * The string includes the ID, question text, answer options, and correct answers.
     *
     * @return String representation of the TestQuestionFromGoogleDocs
     */
    @Override
    public String toString() {
        return "TestQuestionFromGoogleDocs{" +
                "id=" + id +
                ", question='" + question + '\'' +
                ", options=" + options +
                ", correctAnswers=" + correctAnswers +
                '}'
        ;
    }

    /**
     * Compares this TestQuestionFromGoogleDocs to another object for equality.
     * Two TestQuestionFromGoogleDocs objects are considered equal if their IDs, questions,
     * options, and correct answers are equal.
     *
     * @param o The object to compare with
     * @return True if the objects are equal, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        TestQuestionFromGoogleDocs that = (TestQuestionFromGoogleDocs) o;

        return Objects.equals(id, that.id) &&
                Objects.equals(question, that.question) &&
                Objects.equals(options, that.options) &&
                Objects.equals(correctAnswers, that.correctAnswers)
        ;
    }

    /**
     * Calculates the hash code for this TestQuestionFromGoogleDocs.
     * The hash code is based on the ID, question, options, and correct answers.
     *
     * @return The hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                question,
                options,
                correctAnswers
        );
    }

}
