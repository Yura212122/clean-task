package academy.prog.julia.model;

import academy.prog.julia.utils.EntityUtils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

/**
 * Represents a task answer in the system.
 * This class maps to the 'task_answer' table in the database.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate.
 */
@Entity
public class TaskAnswer implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the task answer.
     * This field is auto-generated by the database and cannot be null.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;

    /**
     * URL to the answer.
     */
    private String answerUrl;

    /**
     * ID of the course to which this task belongs.
     */
    private Long courseId;

    /**
     * ID of the lesson to which this task belongs.
     */
    private Long lessonId;

    /**
     * Number of the lesson.
     */
    private Integer lessonNum;

    /**
     * Name of the course.
     */
    private String course;

    /**
     * Flag indicating if the task is passed.
     */
    private Boolean isPassed;

    /**
     * Flag indicating if the task needs correction.
     */
    private Boolean isCorrection;

    /**
     * Message for correction feedback. can be large file.
     */
    @Lob
    private String messageForCorrection;

    /**
     * Flag indicating if the task has been read.
     */
    private Boolean isRead;

    /**
     * Date when the task was submitted.
     */
    private Date submittedDate;

    /**
     * File with the answer in ZIP format.
     * This field is lazily loaded to optimize performance.
     * Max size 1 MB
     */
    @Lob
    @Basic(fetch = FetchType.LAZY)
    @Column(length = 1048576)
    private byte[] zipAnswerFile;

    /**
     * Many-to-one relationship with the user who submitted the answer.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    @JsonIgnore
    private User user;

    /**
     * Many-to-one relationship with the task associated with this answer.
     * This field is ignored by JSON serialization to avoid infinite recursion.
     */
    @ManyToOne
    @JoinColumn(name = "task_id")
    @JsonIgnore
    private Task task;

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the TaskAnswer class.
     */
    public TaskAnswer() {}

    /**
     * Parameterized constructor for creating a new TaskAnswer instance.
     *
     * @param user The user who submitted the answer
     * @param task The task associated with the answer
     * @param answerUrl The URL to the answer
     * @param courseId The ID of the course
     * @param lessonId The ID of the lesson
     * @param lessonNum The number of the lesson
     * @param course The name of the course
     * @param isPassed Flag indicating if the task is passed
     * @param isCorrection Flag indicating if the task needs correction
     * @param messageForCorrection Message for correction feedback
     * @param isRead Flag indicating if the task has been read
     * @param submittedDate Date when the task was submitted
     */
    public TaskAnswer(
            User user,
            Task task,
            String answerUrl,
            Long courseId,
            Long lessonId,
            Integer lessonNum,
            String course,
            Boolean isPassed,
            Boolean isCorrection,
            String messageForCorrection,
            Boolean isRead,
            Date submittedDate
    ) {
        this.user = user;
        this.task = task;
        this.answerUrl = answerUrl;
        this.courseId = courseId;
        this.lessonId = lessonId;
        this.lessonNum = lessonNum;
        this.course = course;
        this.isPassed = isPassed;
        this.isCorrection = isCorrection;
        this.messageForCorrection = messageForCorrection;
        this.isRead = isRead;
        this.submittedDate = submittedDate;
    }

    /**
     * Gets the unique identifier of the task answer.
     *
     * @return The unique identifier of the task answer
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the task answer.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the URL to the answer.
     *
     * @return The answer URL
     */
    public String getAnswerUrl() {
        return answerUrl;
    }

    /**
     * Sets the URL to the answer.
     *
     * @param answerUrl The answer URL to set
     */
    public void setAnswerUrl(String answerUrl) {
        this.answerUrl = answerUrl;
    }

    /**
     * Gets the ID of the course to which this task belongs.
     *
     * @return The course ID
     */
    public Long getCourseId() {
        return courseId;
    }

    /**
     * Sets the ID of the course to which this task belongs.
     *
     * @param courseId The course ID to set
     */
    public void setCourseId(Long courseId) {
        this.courseId = courseId;
    }

    /**
     * Gets the ID of the lesson to which this task belongs.
     *
     * @return The lesson ID
     */
    public Long getLessonId() {
        return lessonId;
    }

    /**
     * Sets the ID of the lesson to which this task belongs.
     *
     * @param lessonId The lesson ID to set
     */
    public void setLessonId(Long lessonId) {
        this.lessonId = lessonId;
    }

    /**
     * Gets the number of the lesson.
     *
     * @return The lesson number
     */
    public Integer getLessonNum() {
        return lessonNum;
    }

    /**
     * Sets the number of the lesson.
     *
     * @param lessonNum The lesson number to set
     */
    public void setLessonNum(Integer lessonNum) {
        this.lessonNum = lessonNum;
    }

    /**
     * Gets the name of the course.
     *
     * @return The course name
     */
    public String getCourse() {
        return course;
    }

    /**
     * Sets the name of the course.
     *
     * @param course The course name to set
     */
    public void setCourse(String course) {
        this.course = course;
    }

    /**
     * Gets the flag indicating if the task is passed.
     *
     * @return True if the task is passed, otherwise false
     */
    public Boolean getIsPassed() {
        return isPassed;
    }

    /**
     * Sets the flag indicating if the task is passed.
     *
     * @param isPassed The flag to set
     */
    public void setIsPassed(Boolean isPassed) {
        this.isPassed = isPassed;
    }

    /**
     * Gets the flag indicating if the task needs correction.
     *
     * @return True if the task needs correction, otherwise false
     */
    public Boolean getIsCorrection() {
        return isCorrection;
    }

    /**
     * Sets the flag indicating if the task needs correction.
     *
     * @param forCorrection The flag to set
     */
    public void setIsCorrection(Boolean forCorrection) {
        isCorrection = forCorrection;
    }

    /**
     * Gets the message for correction feedback.
     *
     * @return The message for correction
     */
    public String getMessageForCorrection() {
        return messageForCorrection;
    }

    /**
     * Sets the message for correction feedback.
     *
     * @param messageForCorrection The message to set
     */
    public void setMessageForCorrection(String messageForCorrection) {
        this.messageForCorrection = messageForCorrection;
    }

    /**
     * Gets the flag indicating if the task has been read.
     *
     * @return True if the task has been read, otherwise false
     */
    public Boolean getIsRead() {
        return isRead;
    }

    /**
     * Sets the flag indicating if the task has been read.
     *
     * @param read The flag to set
     */
    public void setIsRead(Boolean read) {
        isRead = read;
    }

    /**
     * Gets the date when the task was submitted.
     *
     * @return The submission date
     */
    public Date getSubmittedDate() {
        return submittedDate;
    }

    /**
     * Sets the date when the task was submitted.
     *
     * @param submittedDate The submission date to set
     */
    public void setSubmittedDate(Date submittedDate) {
        this.submittedDate = submittedDate;
    }

    /**
     * Gets the user who submitted the answer.
     *
     * @return The user who submitted the answer
     */
    public User getUser() {
        return user;
    }

    /**
     * Sets the user who submitted the answer.
     *
     * @param user The user to set
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Gets the task associated with this answer.
     *
     * @return The task associated with the answer
     */
    public Task getTask() {
        return task;
    }

    /**
     * Sets the task associated with this answer.
     *
     * @param task The task to set
     */
    public void setTask(Task task) {
        this.task = task;
    }

    /**
     * Gets the file with the answer in ZIP format.
     *
     * @return The ZIP file of the answer
     */
    public byte[] getZipAnswerFile() {
        return zipAnswerFile;
    }

    /**
     * Sets the file with the answer in ZIP format.
     *
     * @param zipAnswerFile The ZIP file to set
     */
    public void setZipAnswerFile(byte[] zipAnswerFile) {
        this.zipAnswerFile = zipAnswerFile;
    }

    /**
     * Provides a string representation of the TaskAnswer.
     * The string includes the ID and answer URL.
     *
     * @return The string representation of the TaskAnswer
     */
    @Override
    public String toString() {
        return "TaskAnswer{" +
                "id=" + id +
                ", answerUrl='" + answerUrl + '\'' +
                ", courseId=" + courseId +
                ", lessonId=" + lessonId +
                ", lessonNum=" + lessonNum +
                ", course='" + course + '\'' +
                ", isPassed=" + isPassed +
                ", isCorrection=" + isCorrection +
                ", messageForCorrection='" + messageForCorrection + '\'' +
                ", isRead=" + isRead +
                ", submittedDate=" + submittedDate +
                '}'
        ;
    }

    /**
     * Compares this TaskAnswer to another object for equality.
     * Two TaskAnswer objects are considered equal if their IDs are equal.
     *
     * @param o The object to compare with
     * @return True if the objects are equal, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        TaskAnswer that = (TaskAnswer) o;

        return Objects.equals(id, that.id) &&
                Objects.equals(answerUrl, that.answerUrl) &&
                Objects.equals(courseId, that.courseId) &&
                Objects.equals(lessonId, that.lessonId) &&
                Objects.equals(lessonNum, that.lessonNum) &&
                Objects.equals(course, that.course) &&
                Objects.equals(messageForCorrection, that.messageForCorrection) &&
                Objects.equals(submittedDate, that.submittedDate) &&
                EntityUtils.areEntitiesEqualById(user, that.user, User::getId) &&
                EntityUtils.areEntitiesEqualById(task, that.task, Task::getId)
        ;
    }

    /**
     * Calculates the hash code for this TaskAnswer.
     * The hash code is based on the ID of the TaskAnswer.
     *
     * @return The hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                answerUrl,
                courseId,
                lessonId,
                lessonNum,
                course,
                messageForCorrection,
                submittedDate,
                user != null ? EntityUtils.extractId(user, User::getId) : null,
                task != null ? EntityUtils.extractId(task, Task::getId) : null
        );
    }

}
