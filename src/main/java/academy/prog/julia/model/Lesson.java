package academy.prog.julia.model;

import academy.prog.julia.utils.EntityUtils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

/**
 * Represents a lesson in the system.
 * This class maps to the 'lesson' table in the database.
 *
 * @Entity marks this class as a JPA entity to be managed by Hibernate
 */
@Entity
public class Lesson implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the lesson.
     *
     * This field is auto-generated by the database and cannot be null.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Long id;

    /**
     * Name of the lesson (e.g., Lessons_1).
     */
    private String name;

    /**
     * URL for the description of the lesson.
     */
    private String descriptionUrl;

    /**
     * URL for the video of the lesson.
     */
    private String videoUrl;

    /**
     * Collection of tasks associated with the lesson.
     * Mapped by the 'lesson' field in the Task entity.
     * Fetch type is EAGER, meaning tasks are loaded immediately.
     */
    @OneToMany(mappedBy = "lesson", fetch = FetchType.EAGER)
    @JsonIgnore
    private Set<Task> tasks = new HashSet<>();

    /**
     * Collection of tests associated with the lesson.
     * Mapped by the 'lesson' field in the Test entity.
     * Fetch type is EAGER, meaning tests are loaded immediately.
     */
    @OneToMany(mappedBy = "lesson", fetch = FetchType.EAGER)
    @JsonIgnore
    private Set<Test> tests = new HashSet<>();

    /**
     * Many-to-many relationship with groups.
     * A lesson can be associated with many groups, and a group can have many lessons.
     */
    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(
            name = "lesson_group",
            joinColumns = @JoinColumn(name = "lesson_id"),
            inverseJoinColumns = @JoinColumn(name = "group_id")
    )
    @JsonIgnore
    private Set<Group> groups = new HashSet<>();

    /**
     * ID of the Google spreadsheet associated with the lesson.
     * This field stores the URL of the spreadsheet.
     */
    private String spreadsheetID;

    /**
     * Number of the spreadsheet page associated with the lesson.
     * All lessons currently have number 0(zero) - it's first letter of Google sheet.
     */
    private Integer sheetNumber;

    /**
     * Default constructor required by JPA.
     * Initializes a new instance of the Lesson class.
     */
    public Lesson() {}

    /**
     * Gets the unique identifier of the lesson.
     *
     * @return The unique identifier of the lesson
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the lesson.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the name of the lesson.
     *
     * @return The name of the lesson
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the lesson.
     *
     * @param name The name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the URL for the description of the lesson.
     *
     * @return The description URL
     */
    public String getDescriptionUrl() {
        return descriptionUrl;
    }

    /**
     * Sets the URL for the description of the lesson.
     *
     * @param descriptionUrl The description URL to set
     */
    public void setDescriptionUrl(String descriptionUrl) {
        this.descriptionUrl = descriptionUrl;
    }

    /**
     * Gets the URL for the video of the lesson.
     *
     * @return The video URL
     */
    public String getVideoUrl() {
        return videoUrl;
    }

    /**
     * Sets the URL for the video of the lesson.
     *
     * @param videoUrl The video URL to set
     */
    public void setVideoUrl(String videoUrl) {
        this.videoUrl = videoUrl;
    }

    /**
     * Gets the collection of tasks associated with the lesson.
     *
     * @return The set of tasks
     */
    public Set<Task> getTasks() {
        return tasks;
    }

    /**
     * Sets the collection of tasks associated with the lesson.
     *
     * @param tasks The set of tasks to set
     */
    public void setTasks(Set<Task> tasks) {
        this.tasks = tasks;
    }

    /**
     * Gets the collection of tests associated with the lesson.
     *
     * @return The set of tests
     */
    public Set<Test> getTests() {
        return tests;
    }

    /**
     * Sets the collection of tests associated with the lesson.
     *
     * @param tests The set of tests to set
     */
    public void setTests(Set<Test> tests) {
        this.tests = tests;
    }

    /**
     * Gets the set of groups associated with the lesson.
     *
     * @return The set of groups
     */
    public Set<Group> getGroups() {
        return groups;
    }

    /**
     * Sets the set of groups associated with the lesson.
     *
     * @param groups The set of groups to set
     */
    public void setGroups(Set<Group> groups) {
        this.groups = groups;
    }

    /**
     * Gets the ID of the Google spreadsheet associated with the lesson.
     *
     * @return The spreadsheet ID
     */
    public String getSpreadsheetID() {
        return spreadsheetID;
    }

    /**
     * Sets the ID of the Google spreadsheet associated with the lesson.
     *
     * @param spreadsheetID The spreadsheet ID to set
     */
    public void setSpreadsheetID(String spreadsheetID) {
        this.spreadsheetID = spreadsheetID;
    }

    /**
     * Gets the number of the spreadsheet page associated with the lesson.
     *
     * @return The sheet number
     */
    public Integer getSheetNumber() {
        return sheetNumber;
    }

    /**
     * Sets the number of the spreadsheet page associated with the lesson.
     *
     * @param sheetNumber The sheet number to set
     */
    public void setSheetNumber(Integer sheetNumber) {
        this.sheetNumber = sheetNumber;
    }

    /**
     * Returns a string representation of the lesson.
     *
     * @return A string representing the lesson object
     */
    @Override
    public String toString() {
        return "Lesson{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", descriptionUrl='" + descriptionUrl + '\'' +
                ", videoUrl='" + videoUrl + '\'' +
                ", tasks=" + tasks +
                ", tests=" + tests +
                ", spreadsheetID='" + spreadsheetID + '\'' +
                ", sheetNumber=" + sheetNumber +
                '}'
        ;
    }

    /**
     * Compares this lesson to another object for equality.
     * Two lessons are considered equal if their IDs, names, URLs, tasks, tests, groups, and spreadsheet ID are equal.
     *
     * @param o The object to compare to
     * @return True if this lesson is equal to the other object, otherwise false
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Lesson lesson = (Lesson) o;

        return Objects.equals(id, lesson.id) &&
                Objects.equals(name, lesson.name) &&
                Objects.equals(descriptionUrl, lesson.descriptionUrl) &&
                Objects.equals(videoUrl, lesson.videoUrl) &&
                Objects.equals(spreadsheetID, lesson.spreadsheetID)
        ;
    }

    /**
     * Computes the hash code for this lesson.
     * The hash code is based on the lesson's ID, name, URLs, tasks, tests, groups, and spreadsheet ID.
     *
     * @return The hash code of the lesson
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                name,
                descriptionUrl,
                videoUrl,
                spreadsheetID
        );
    }

}
