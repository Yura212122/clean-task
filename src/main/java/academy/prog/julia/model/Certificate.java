package academy.prog.julia.model;

import academy.prog.julia.utils.EntityUtils;
import academy.prog.julia.utils.Utils;
import jakarta.persistence.*;

import java.io.Serial;
import java.io.Serializable;
import java.util.Objects;

/**
 * Represents a certificate entity in the database.
 *
 * This class maps to the 'certificates' table and defines the structure of certificate data.
 *
 * @Entity Marks this class as a JPA entity to be managed by Hibernate
 *
 */
@Entity
@Table(name = "certificates")
public class Certificate implements Serializable {

    /**
     * Ensure compatibility between different versions of the class
     */
    @Serial
    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the certificate.
     *
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue
    private Long id;

    /**
     * Unique identifier for the certificate file.
     *
     * This field must be unique and cannot be null.
     */
    @Column(unique = true, nullable = false)
    private String uniqueId;

    /**
     * Binary data for the certificate file.
     *
     * This field is a large object (@Lob), specifies a maximum length of 10 MB and cannot be null.
     */
    @Lob
    @Column(length = 10240000, nullable = false)
    private byte[] file;

    /**
     * User associated with this certificate.
     *
     * Represents a many-to-one relationship with the User entity.
     */
    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    /**
     * Group name associated with the certificate.
     *
     * This field is optional and can be null.
     */
    @Column(name = "group_name")
    private String groupName;

    /**
     * Default constructor required by JPA.
     *
     * Initializes a new instance of the Certificate class.
     */
    public Certificate() { }

    /**
     * Constructor for creating a Certificate with a given file.
     * The uniqueId is automatically generated from the file's hash.
     *
     * @param file The binary data of the certificate file
     */
    public Certificate(byte[] file) {
        setUniqueId(Utils.hashBuffers(file));
    }

    /**
     * Gets the unique identifier of the certificate.
     *
     * @return The unique identifier of the certificate
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the certificate.
     *
     * @param id The unique identifier to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the unique ID of the certificate.
     *
     * @return The unique ID of the certificate
     */
    public String getUniqueId() {
        return uniqueId;
    }

    /**
     * Sets the unique ID of the certificate.
     *
     * @param uniqueId The unique ID to set
     */
    public void setUniqueId(String uniqueId) {
        this.uniqueId = uniqueId;
    }

    /**
     * Gets the binary data of the certificate file.
     *
     * @return The binary data of the certificate file
     */
    public byte[] getFile() {
        return file;
    }

    /**
     * Sets the binary data of the certificate file.
     *
     * @param file The binary data to set
     */
    public void setFile(byte[] file) {
        this.file = file;
    }

    /**
     * Gets the user associated with this certificate.
     *
     * @return The associated User entity
     */
    public User getUser() {
        return user;
    }

    /**
     * Sets the user associated with this certificate.
     *
     * @param user The User entity to set
     */
    public void setUser(User user) {
        this.user = user;
    }

    /**
     * Gets the group name associated with this certificate.
     *
     * @return The group name associated with the certificate
     */
    public String getGroupName() {
        return groupName;
    }

    /**
     * Sets the group name associated with this certificate.
     *
     * @param groupName The group name to set
     */
    public void setGroupName(String groupName) {
        this.groupName = groupName;
    }

    /**
     * Compares this certificate to the specified object for equality.
     * <p>
     * Two certificates are considered equal if they have the same ID, unique ID, user (based on user ID),
     * and group name. The comparison of the user is done based on its ID, which is provided
     * by the {@link User::getId} method.
     *
     * @param o the object to compare this certificate against
     * @return true if the specified object is equal to this certificate, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Certificate that = (Certificate) o;

        return Objects.equals(id, that.id) &&
                Objects.equals(uniqueId, that.uniqueId) &&
                EntityUtils.areEntitiesEqualById(user, that.user, User::getId) &&
                Objects.equals(groupName, that.groupName)
        ;
    }

    /**
     * Returns a hash code value for this certificate.
     * <p>
     * The hash code is calculated based on the certificate's ID, unique ID, user (based on user ID),
     * and group name. The hash code of the user is based on its ID, which is obtained
     * using the {@link User::getId} method.
     *
     * @return a hash code value for this certificate
     */
    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                uniqueId,
                user != null ? EntityUtils.extractId(user, User::getId) : null,
                groupName
        );
    }

}
